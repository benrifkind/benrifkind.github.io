??w
??wd
getwd()
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/GitHubWebsite/benrifkind.github.io/_knitr/Fit Project")
source('~/.active-rstudio-document', echo=TRUE)
?cvrf
?rfcv
train.cut = train[, c(1:25)] #use only a few of PCA's
train.cut$classe = train.class #add back in classification column
train.cut$classe = NULL
rfcv(train.cut, train.class)
cvs = rfcv(train.cut, train.class)
cvs
error.cv
names(cvs)
cvs$error.cv
cvs$predicted
cvs$n.var
train.cut = train[, c(1:25)] #use only a few of PCA's
train.cut$classe = train.class #add back in classification column
cvs
set.seed(1224)
fit = randomForest(classe~., data=train.cut,
importance = TRUE, ntree = 130)
names(fit)
check = predict(fit, newdata = train[, 1:25])
check[1:10]
table(check, train.class)
nrow(train.cut)
x = matrix(1:30, 6, 5)
x
temp = function(x){
}
?sample
index = 1:nrow(train.cut)
testindex = sample(index, n = 0.75*index)
testindex = sample(index, size = 0.75*index)
length(testindex)
length(index)
index[1:10]
testindex = sample(index, size = 0.75*length(index))
length(testindex)
testindex = sample(10, size = 0.75*10)
testindex
set.seed(1224)
testindex = sample(10, size = 0.75*10)
testindex
set.seed(1224)
testindex = sample(10, size = 0.75*10)
testindex
set.seed(1224)
index = sample(nrow(train.cut), size = 0.8*nrow(train.cut))
X = train.cut[index, ]
validation = train.cut[-index,]
fit = randomForest(classe~., data=X,
importance = TRUE, ntree = 130)
predictions = predict(fit, newdata = validation)
table(predictions, train.class[-index])
train.cut = train[, c(1:25)] #use only a few of PCA's
set.seed(1224)
index = sample(nrow(train.cut), size = 0.8*nrow(train.cut))
X = train.cut[index, ]
validation = train.cut[-index,]
fit = randomForest(X, train.classe[index],
importance = TRUE, ntree = 130)
fit = randomForest(X, train.class[index],
importance = TRUE, ntree = 130)
predictions = predict(fit, newdata = validation)
table(predictions, train.class[-index])
install.packages("libsvm")
install.packages('e1071')
library(e1071)
?svm
class(train.class)
svm.fit = svm(X, train.class[index], cost = 100, gamma = 1)
?predict
svm.predict = predict(svm.fit, newdata = validation)
table(predict = svm.predict, true = train.class[-index])
table(predict = predictions, true = train.class[-index])
?classAgreement
library(caret)
confusionMatrix(predict = predictions, true = train.class[-index])
?confusionMatrix
x = table(predict = predictions, true = train.class[-index])
confusionMatrix(x)
y = table(predict = svm.predict, true = train.class[-index])
confusionMatrix(y)
bob = [11, 3, 18, 15,
98, 49, 23, 18, 19, 28, 1, 2, 3]
bob = [11, 3, 18, 15, 98, 49, 23, 18, 19, 28, 1, 2, 3]
bob = list(11, 3, 18, 15, 98, 49, 23, 18, 19, 28, 1, 2, 3)
sum(bob)
bob
bob = c(11, 3, 18, 15, 98, 49, 23, 18, 19, 28, 1, 2, 3)
sum(bob)
?split
split(1:288, bob)
cut(1:288, breaks = bob)
?pt
x = 0:100/100
x
quartz()
plot(x, dt(x, df = 10))
x = -100:100/200
x
plot(x, dt(x, df = 10))
plot(x, dt(x, df = 10), pch = 19)
plot(x, dt(x, df = 10), pch = 16)
plot(x, dt(x, df = 10), pch = 16) + plot(x, dnorm(x), col = 'red')
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
x = -300:300/600
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
x
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
quartz()
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
plot(x, dt(x, df = 100), pch = 16) + points(x, dnorm(x), col = 'red')
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
plot(x, 3*x)
plot(x+1, 3*x)
plot(x, 3*x)
plot(x, 3*x, xlim = (-3,3))
plot(x, 3*x, xlim = c(-3,3))
x
plot(x,x)
x = -300:300/600
x
x = -300:300/100
x
plot(x,3*x)
plot(x, dt(x, df = 10), pch = 16) + points(x, dnorm(x), col = 'red')
plot(x, dt(x, df = 10), pch = 16, lwd = 3) + points(x, dnorm(x), col = 'red', lwd = 3)
plot(x, dt(x, df = 10), pch = 11, lwd = 3) + points(x, dnorm(x), col = 'red', lwd = 3)
plot(x, dt(x, df = 10), pch = 121, lwd = 3) + points(x, dnorm(x), col = 'red', lwd = 3)
x = -30:30/10
plot(x, dt(x, df = 10), pch = 16, lwd = 3) + points(x, dnorm(x), col = 'red', lwd = 3)
?dnorm
plot(x, dnorm(x, sd = 1), pch = 16, lwd = 3) + points(x, dnorm(x, sd = 10), col = 'red', lwd = 3) + + points(x, dnorm(x, sd = 100), col = 'blue', lwd = 3)
plot(x, dnorm(x, sd = 1), pch = 16, lwd = 3) + points(x, dnorm(x, sd = 10), col = 'red', lwd = 3) + + points(x, dnorm(x, sd = 100), col = 'blue', lwd = 3)
plot(x, dnorm(x, sd = 1), pch = 16, lwd = 3) + points(x, dnorm(x, sd = 10), col = 'red', lwd = 3) + points(x, dnorm(x, sd = 100), col = 'blue', lwd = 3)
plot(x, dnorm(x, sd = 1), pch = 16, lwd = 3) + points(x, dnorm(x, sd = 5), col = 'red', lwd = 3) + points(x, dnorm(x, sd = 6), col = 'blue', lwd = 3)
plot(x, dnorm(x, sd = 1), pch = 16, lwd = 3) + points(x, dnorm(x, sd = 2), col = 'red', lwd = 3) + points(x, dnorm(x, sd = 3), col = 'blue', lwd = 3)
plot(x, dnorm(x, sd = 10), pch = 16, lwd = 3)
plot(x, dnorm(x, sd = 100), pch = 16, lwd = 3)
plot(x, dnorm(x, sd = 0.1), pch = 16, lwd = 3)
plot(x, dnorm(x, sd = 0.01), pch = 16, lwd = 3)
plot(x, x*dnorm(x, sd = 0.01), pch = 16, lwd = 3)
plot(x, x*dnorm(x, sd = 0.001), pch = 16, lwd = 3)
plot(x, x*dnorm(x, sd = 0.1), pch = 16, lwd = 3)
sdnorm = function(sd){
dnorm(1, sd)
}
plot(x, x*sdnorm(x), pch = 16, lwd = 3)
plot(x, sdnorm(x), pch = 16, lwd = 3)
sdnorm = function(sd, x){
dnorm(x, sd)
}
plot(x, sdnorm(x, 2), pch = 16, lwd = 3)
plot(x, sdnorm(x, -1), pch = 16, lwd = 3)
